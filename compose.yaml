services:
  db:
    image: postgres:latest
    container_name: funandchecks-db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  funandchecks-api:
    container_name: funandchecks-api
    image: funandchecks-api
    build:
      context: .
      dockerfile: FunAndChecks/Dockerfile
    restart: always
    user: root
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_EXTERNAL_PORT}:${API_INTERNAL_PORT}"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:${API_INTERNAL_PORT}
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - BotAuth__SharedSecret=${SHARED_SECRET}
      - Jwt__Key=${JWT_KEY}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - ApiConfiguration__BaseUrl=http://localhost:${API_INTERNAL_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${API_INTERNAL_PORT}/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - dataprotection-keys:/home/app/.aspnet/DataProtection-Keys
      - ./config/initialAdmins.json:/app/config/initialAdmins.json:ro

  user-bot:
    container_name: user-bot
    image: user-bot
    build:
      context: .
      dockerfile: TelegramBot/Dockerfile
    restart: on-failure
    depends_on:
      funandchecks-api:
        condition: service_healthy
    environment:
      - DOTNET_ENVIRONMENT=Production
      - BotConfiguration__BotToken=${USER_BOT_TOKEN}
      - ApiConfiguration__BaseUrl=http://funandchecks-api:${API_INTERNAL_PORT}
      - ApiConfiguration__SharedSecret=${SHARED_SECRET}

  admin-bot:
    container_name: admin-bot
    image: admin-bot
    build:
      context: .
      dockerfile: AdminBot/Dockerfile
    restart: on-failure
    depends_on:
      funandchecks-api:
        condition: service_healthy
    environment:
      - DOTNET_ENVIRONMENT=Production
      - BotConfiguration__BotToken=${ADMIN_BOT_TOKEN}
      - ApiConfiguration__BaseUrl=http://funandchecks-api:${API_INTERNAL_PORT}
      - ApiConfiguration__SharedSecret=${SHARED_SECRET}

volumes:
  pgdata:
  dataprotection-keys: