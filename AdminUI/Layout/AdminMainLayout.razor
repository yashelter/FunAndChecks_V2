@inherits LayoutComponentBase
@inject ThemeService ThemeService
@implements IAsyncDisposable

<MudThemeProvider Theme="_customTheme" @bind-IsDarkMode="ThemeService.IsDarkMode" />
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">FunAndChecks Admin</MudText>
        <MudSpacer />
        
        <MudIconButton Icon="@(ThemeService.IsDarkMode ? @Icons.Material.Filled.Brightness7 : @Icons.Material.Filled.Brightness4)" 
                       Color="Color.Inherit" 
                       Edge="Edge.End" 
                       OnClick="ToggleTheme" />
    </MudAppBar>
    
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader><MudText Typo="Typo.h6">Меню</MudText></MudDrawerHeader>
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    
    private readonly MudTheme _customTheme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#3f51b5", 
            Secondary = Colors.Pink.Accent2,
            AppbarBackground = "#3f51b5",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = "#27272f",
            DrawerBackground = "#27272f"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        // Подписываемся на событие, чтобы UI реагировал на изменения
        ThemeService.OnThemeChanged += OnThemeChangedHandler;
        await ThemeService.InitializeAsync();
    }

    // Обертка для вызова StateHasChanged в правильном контексте
    private void OnThemeChangedHandler()
    {
        InvokeAsync(StateHasChanged);
    }
    
    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChangedHandler;
    }

    public async ValueTask DisposeAsync()
    {
        await Task.Run(Dispose);
    }

}