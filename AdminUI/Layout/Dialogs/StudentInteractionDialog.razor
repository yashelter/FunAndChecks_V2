@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Student.LastName @Student.FirstName (@Student.GroupName)</MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="2" Rounded="true" Centered="true">
            <MudTabPanel Text="Статус в очереди">
                <MudPaper Class="pa-4 mt-2">
                    <MudText Typo="Typo.h6" GutterBottom="true">Изменить статус</MudText>
                    <MudStack>
                        @if (Student.Status != QueueUserStatus.Checking)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ChangeQueueStatus(QueueUserStatus.Checking))">Принять в работу</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => ChangeQueueStatus(QueueUserStatus.Finished))">Завершил</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => ChangeQueueStatus(QueueUserStatus.Skipped))">Пропущен</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => ChangeQueueStatus(QueueUserStatus.Waiting))">Вернуть в очередь</MudButton>
                        } 
                    </MudStack>
                </MudPaper>
            </MudTabPanel>
            
            <MudTabPanel Text="Задачи">
                @if (_isLoadingTasks)
                {
                    <div class="d-flex justify-center pa-4"><MudProgressCircular Indeterminate="true" /></div>
                }
                else if (_tasks != null && _tasks.Any())
                {
                    <MudList T="TaskUserDto" Clickable="false">
                        @foreach(var task in _tasks)
                        {
                            <MudPaper Outlined="true" Class="pa-3 mb-3">
                                <div class="d-flex justify-space-between align-start">
                                    <div>
                                        <MudText Typo="Typo.body1"><b>@task.Name</b> (@task.Points б.)</MudText>
                                        <MudText Typo="Typo.body2">Статус: <MudChip Label="true" Size="Size.Small" Color="@GetTaskStatusColor(task.Status)">@GetTaskStatusText(task.Status)</MudChip></MudText>
                                    </div>
                                    <MudStack Spacing="1" AlignItems="AlignItems.End">
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Success" OnClick="@(() => SubmitTaskStatus(task.Id, SubmissionStatus.Accepted))">Зачтено</MudButton>
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning" OnClick="@(() => HandleReworkClick(task.Id))">На доработку</MudButton>
                                    </MudStack>
                                </div>
                                
                                <MudDivider Class="my-2" />
                                
                                <MudText Typo="Typo.caption">История проверок:</MudText>
                                @if (_taskHistory.ContainsKey(task.Id) && _taskHistory[task.Id].Any())
                                {
                                    <MudList T="TaskLog" Dense="true" Class="ml-n4">
                                        @foreach(var log in _taskHistory[task.Id].OrderByDescending(l => l.SubmissionDate))
                                        {
                                            <MudListItem T="TaskLog" Item="log" Icon="@(log.Status == SubmissionStatus.Accepted ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)" IconColor="@(log.Status == SubmissionStatus.Accepted ? Color.Success : Color.Error)">
                                                <div class="d-flex flex-column">
                                                    <MudText Typo="Typo.body2"><i>"@log.Comment"</i></MudText>
                                                    <MudText Typo="Typo.caption">@log.Admin?.Name (@log.SubmissionDate.ToLocalTime().ToString("g", CultureInfo.GetCultureInfo("ru-RU"))</MudText>
                                                </div>
                                            </MudListItem>
                                        }
                                    </MudList>
                                }
                                else
                                {
                                     <MudText Typo="Typo.caption" Class="mt-2"><i>История отсутствует</i></MudText>
                                }
                            </MudPaper>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Class="pa-4">Задачи для этого пользователя не найдены.</MudText>
                }
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Закрыть</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public QueueParticipantDetailDto Student { get; set; }
    [Parameter] public int EventId { get; set; }
    [Parameter] public int SubjectId { get; set; }

    private List<TaskUserDto> _tasks;
    private Dictionary<int, List<TaskLog>> _taskHistory = new();
    private bool _isLoadingTasks = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasksAndAllHistory();
    }

    private async Task LoadTasksAndAllHistory()
    {
        _isLoadingTasks = true;
        try
        {
            // 1. Получаем список всех задач пользователя
            _tasks = await Http.GetFromJsonAsync<List<TaskUserDto>>($"/api/Public/subjects/{SubjectId}/tasks/user/{Student.UserId}");
            
            if (_tasks != null && _tasks.Any())
            {
                var historyTasks = _tasks.Select(task => LoadTaskHistory(task.Id)).ToList();
                await Task.WhenAll(historyTasks);
            }
        }
        catch (Exception ex)
        { 
            Snackbar.Add($"Не удалось загрузить задачи студента: {ex.Message}", Severity.Error); 
        }
        finally
        {
            _isLoadingTasks = false;
        }
    }
    
    private async Task LoadTaskHistory(int taskId)
    {
        try
        {
            var history = await Http.GetFromJsonAsync<List<TaskLog>>($"/api/Admin/get/user/{Student.UserId}/task-logs/{taskId}");
            if (history != null)
            {
                _taskHistory[taskId] = history;
            }
        }
        catch 
        {
            // Можно добавить логирование, но не показываем Snackbar для каждого запроса, чтобы не спамить
            Console.WriteLine($"Failed to load history for task {taskId}");
        }
    }

    private async Task ChangeQueueStatus(QueueUserStatus status)
    {
        var dto = new { status = status };
        var response = await Http.PutAsJsonAsync($"/api/Admin/queue/{EventId}/user/{Student.UserId}/status", dto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Статус в очереди обновлен", Severity.Success);
            Student.Status = status;
            if (status != QueueUserStatus.Checking)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            StateHasChanged();
        }
        else { Snackbar.Add("Ошибка обновления статуса", Severity.Error); }
    }

    private async Task HandleReworkClick(int taskId)
    {
        var dialog = DialogService.Show<CommentDialog>("Комментарий");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await SubmitTaskStatus(taskId, SubmissionStatus.Rejected, result.Data.ToString());
        }
    }

    private async Task SubmitTaskStatus(int taskId, SubmissionStatus status, string comment = "")
    {
        var dto = new { userId = Student.UserId, taskId, status, comment };
        var response = await Http.PostAsJsonAsync("/api/Admin/create/submission", dto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Статус задачи обновлен", Severity.Success);
            await LoadTaskHistory(taskId); 
            var taskToUpdate = _tasks.FirstOrDefault(t => t.Id == taskId);
            if (taskToUpdate != null) taskToUpdate.Status = status;
            StateHasChanged();
        }
        else { Snackbar.Add("Ошибка обновления статуса задачи", Severity.Error); }
    }

    private string GetTaskStatusText(SubmissionStatus status) => status switch
    {
        SubmissionStatus.Rejected => "На доработке",
        SubmissionStatus.Accepted => "Зачтено",
        _ => "Не сдано"
    };
    
    private Color GetTaskStatusColor(SubmissionStatus status) => status switch
    {
        SubmissionStatus.Rejected => Color.Warning,
        SubmissionStatus.Accepted => Color.Success,
        _ => Color.Default
    };

    void Cancel() => MudDialog.Close(DialogResult.Cancel());
}