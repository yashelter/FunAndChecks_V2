@page "/queues"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Активные очереди</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Активные очереди</MudText>

@if (_queues == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!_queues.Any())
{
    <MudAlert Severity="Severity.Info">Активных очередей не найдено.</MudAlert>
}
else
{
    <MudGrid Spacing="3">
        @foreach (var queue in _queues)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="3" @onclick="@(() => NavigateToQueue(queue.Id))" Style="cursor: pointer;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@queue.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>Дата: @queue.EventDateTime.ToString("g")</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private List<QueueEventDto> _queues;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _queues = await Http.GetFromJsonAsync<List<QueueEventDto>>("/api/Public/get-all/queue/events");
        }
        catch (Exception ex)
        {
            // Обработка ошибок, например, показать сообщение
            Console.WriteLine(ex.Message);
            _queues = new List<QueueEventDto>(); // Чтобы не было null
        }
    }

    private void NavigateToQueue(int eventId)
    {
        NavManager.NavigateTo($"/queue/{eventId}");
    }
}