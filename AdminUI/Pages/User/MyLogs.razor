@page "/student/my-logs"
@layout StudentLayout
@attribute [Authorize(Roles = "User")]
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Мои Сдачи</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Мои результаты и история сдач</MudText>

<MudSelect T="SubjectDto" ValueChanged="OnSubjectSelected" Label="Выберите предмет" Class="my-4" Variant="Variant.Outlined">
    @foreach (var subject in _subjects) { <MudSelectItem T="SubjectDto" Value="subject">@subject.Name</MudSelectItem> }
</MudSelect>

@if (_isLoadingResults)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_results != null)
{
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h5">Итог по предмету: <b>@_results.SubjectName</b></MudText>
        <MudText Typo="Typo.h6">Всего баллов: <MudChip T="object" Color="Color.Primary">@_results.TotalPointsEarned / @_results.MaxPointsPossible</MudChip></MudText>
    </MudPaper>

    <MudStack Spacing="3">
        @foreach (var taskResult in _results.TaskResults.OrderBy(t => t.TaskName))
        {
            <MudPaper Outlined="true" Class="pa-3">
                <div class="d-flex justify-space-between align-start">
                    <div>
                        <MudText Typo="Typo.body1"><b>@taskResult.TaskName</b> (@taskResult.MaxPoints б.)</MudText>
                        <MudText Typo="Typo.body2">Текущий статус: <MudChip T="object" Label="true" Size="Size.Small" Color="@GetTaskStatusColor(taskResult.CurrentStatus)">@GetTaskStatusText(taskResult.CurrentStatus)</MudChip></MudText>
                    </div>
                </div>
                
                @if (taskResult.SubmissionHistory != null && taskResult.SubmissionHistory.Any())
                {
                    <MudExpansionPanel Text="Показать историю проверок" Class="mt-2">
                        <MudList T="SubmissionLogDto" Dense="true">
                            @foreach(var log in taskResult.SubmissionHistory.OrderByDescending(l => l.SubmissionDate))
                            {
                                <MudListItem T="SubmissionLogDto" Icon="@(log.Status == SubmissionStatus.Accepted ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Cancel)" IconColor="@(log.Status == SubmissionStatus.Accepted ? Color.Success : Color.Error)">
                                    <div class="d-flex flex-column">
                                        <MudText Typo="Typo.body2"><i>"@log.Comment"</i></MudText>
                                        <MudText Typo="Typo.caption">Проверил: @log.AdminName (@log.SubmissionDate.ToLocalTime().ToString("g"))</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudExpansionPanel>
                }
            </MudPaper>
        }
    </MudStack>
}

@code {
    private List<SubjectDto> _subjects = new();
    private UserSubjectResultsDto _results;
    private bool _isLoadingResults = false;

    protected override async Task OnInitializedAsync()
    {
        _subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("/api/Users/me/subjects");
    }

    private async Task OnSubjectSelected(SubjectDto selectedSubject)
    {
        if (selectedSubject == null) return;

        _isLoadingResults = true;
        _results = null;
        StateHasChanged();

        try
        {
            _results = await Http.GetFromJsonAsync<UserSubjectResultsDto>($"/api/Users/me/results/subject/{selectedSubject.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Не удалось загрузить результаты: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingResults = false;
            StateHasChanged();
        }
    }

    // Helper-методы для отображения
    private string GetTaskStatusText(SubmissionStatus status) => status switch
    {
        SubmissionStatus.Rejected => "На доработке",
        SubmissionStatus.Accepted => "Зачтено",
        _ => "Не сдано"
    };
    
    private Color GetTaskStatusColor(SubmissionStatus status) => status switch
    {
        SubmissionStatus.Rejected => Color.Warning,
        SubmissionStatus.Accepted => Color.Success,
        _ => Color.Default
    };
}