@page "/student/queues"
@layout StudentLayout
@attribute [Authorize(Roles = "User")]
@using AdminUI.Layout.Components
@implements IAsyncDisposable
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject ThemeService ThemeService

<PageTitle>Очереди</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Очереди</MudText>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_selectedQueueDetails != null)
{
    <div class="d-flex align-center mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="BackToList" Edge="Edge.Start" />
        <MudText Typo="Typo.h5" Class="ml-2">Очередь: <b>@_selectedQueueDetails.EventName</b></MudText>
    </div>
    
    @if (_isQueueLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudList T="QueueParticipantDetailDto" Clickable="false">
            @foreach (var student in _sortedParticipants)
            {
                <MudListItem T="QueueParticipantDetailDto" Item="student" Style="@GetRowStyle(student)">
                    <div class="d-flex justify-space-between align-center flex-grow-1">
                        <div class="d-flex flex-column">
                            <div class="d-flex align-center gap-2">
                                <div style="background-color: @student.Color; color: @GetTextColorForBackground(student.Color); border-radius: 16px; padding: 4px 12px; font-weight: 500;">
                                    @student.LastName @student.FirstName
                                </div>
                                <MudChip Label="true" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info">@ParseGroupNumber(student.GroupName)</MudChip>
                            </div>
                            <MudText Typo="Typo.caption" Class="d-block d-sm-none mt-1 ml-2">Баллы: <b>@student.TotalPoints</b></MudText>
                        </div>
                        <div class="d-flex align-center gap-2">
                            <MudText Class="d-none d-sm-block mr-2">Баллы: <b>@student.TotalPoints</b></MudText>
                            <MudChip Color="@GetStatusColor(student.Status)" Size="Size.Small" Variant="Variant.Text">@GetStatusText(student.Status, student.CheckingByAdminName)</MudChip>
                        </div>
                    </div>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    }
}
else
{
    <MudStack Spacing="4">
        <div>
            <MudText Typo="Typo.h5" GutterBottom="true">Мои очереди</MudText>
            @if (_myEvents.Any())
            {
                <MudStack Spacing="2">
                    @foreach (var ev in _myEvents) { <QueueEventCard Event="ev" IsJoined="true" OnViewClick="ViewQueue" /> }
                </MudStack>
            }
            else { <MudText>Вы пока не записаны ни в одну очередь.</MudText> }
        </div>

        <MudDivider />

        <div>
            <MudText Typo="Typo.h5" GutterBottom="true">Доступные для записи</MudText>
            @if (_availableToJoinEvents.Any())
            {
                <MudStack Spacing="2">
                    @foreach (var ev in _availableToJoinEvents) { <QueueEventCard Event="ev" IsJoined="false" OnJoinClick="JoinQueue" /> }
                </MudStack>
            }
            else { <MudText>Сейчас нет очередей, в которые можно записаться.</MudText> }
        </div>
    </MudStack>
}

@code {
    private List<QueueEventDto> _myEvents = new();
    private List<QueueEventDto> _availableToJoinEvents = new();
    private bool _isLoading = true;

    private QueueDetailsDto? _selectedQueueDetails;
    private List<QueueParticipantDetailDto> _sortedParticipants = new();
    private bool _isQueueLoading = false;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += StateHasChanged;
        await LoadAllEvents();
    }
    

    private async Task LoadAllEvents()
    {
        _isLoading = true;
        try
        {
            var myEventsTask = Http.GetFromJsonAsync<List<QueueEventDto>>("/api/Users/me/queue-events");
            var availableEventsTask = Http.GetFromJsonAsync<List<QueueEventDto>>("/api/Users/me/available-queue-events");
            await Task.WhenAll(myEventsTask, availableEventsTask);

            _myEvents = myEventsTask.Result ?? new();
            var allAvailable = availableEventsTask.Result ?? new();

            // Фильтруем доступные, чтобы не показывать те, в которые уже записан
            var myEventIds = new HashSet<int>(_myEvents.Select(e => e.Id));
            _availableToJoinEvents = allAvailable.Where(e => !myEventIds.Contains(e.Id)).ToList();
        }
        catch (Exception ex) { Snackbar.Add($"Не удалось загрузить данные об очередях: {ex.Message}", Severity.Error); }
        finally { _isLoading = false; }
    }

    private async Task JoinQueue(int eventId)
    {
        var response = await Http.PostAsync($"/api/Users/queue/{eventId}/join", null);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Вы успешно вступили в очередь!", Severity.Success);
            await LoadAllEvents();
        }
        else { Snackbar.Add("Не удалось вступить в очередь", Severity.Error); }
    }

    private async Task ViewQueue(int eventId)
    {
        _isQueueLoading = true;
        _selectedQueueDetails = null;
        StateHasChanged();

        try
        {
            _selectedQueueDetails = await Http.GetFromJsonAsync<QueueDetailsDto>($"/api/Public/get/queue/{eventId}");
            if (_selectedQueueDetails != null)
            {
                _sortedParticipants = _selectedQueueDetails.Participants
                    .OrderBy(p => p.Status)
                    .ThenByDescending(p => p.TotalPoints)
                    .ToList();
                await InitializeSignalR(eventId);
            }
        }
        catch { Snackbar.Add("Не удалось загрузить детали очереди.", Severity.Error); }
        finally { _isQueueLoading = false; }
    }

    private async Task InitializeSignalR(int eventId)
    {
        if (_hubConnection != null) await _hubConnection.DisposeAsync();
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/apiHub/queueHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<QueueUserUpdateDto>("QueueUserUpdated", (updateDto) =>
        {
            return InvokeAsync(() => ViewQueue(eventId));
        });
        
        try
        {
            await _hubConnection.StartAsync();
            await _hubConnection.InvokeAsync("SubscribeToQueue", eventId);
        }
        catch (Exception ex) { Snackbar.Add($"Не удалось подключиться к обновлениям: {ex.Message}", Severity.Error); }
    }
    
    private void BackToList()
    {
        _selectedQueueDetails = null;
        _ = DisposeHubConnectionAsync();
    }

    public async ValueTask DisposeAsync()
    {
       await DisposeHubConnectionAsync();
    }

    private async Task DisposeHubConnectionAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
        }
    }
    
    
    private string ParseGroupNumber(string groupName)
    {
        if (string.IsNullOrEmpty(groupName)) return "?";
        var match = Regex.Match(groupName, @"-(?:\d{1})(?<num>\d{2})(?:Б|БВ)-");
        return match.Success ? match.Groups["num"].Value : groupName;
    }

    private string GetTextColorForBackground(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || hexColor.Length != 7 || !hexColor.StartsWith("#")) return "#000000";
        try
        {
            int r = int.Parse(hexColor.Substring(1, 2), NumberStyles.HexNumber);
            int g = int.Parse(hexColor.Substring(3, 2), NumberStyles.HexNumber);
            int b = int.Parse(hexColor.Substring(5, 2), NumberStyles.HexNumber);
            double luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
            return luminance > 0.5 ? "#000000" : "#FFFFFF";
        }
        catch { return "#000000"; }
    }


    private Color GetStatusColor(QueueUserStatus status) => status switch
    {
        QueueUserStatus.Checking => Color.Default,
        QueueUserStatus.Skipped => Color.Warning, 
        QueueUserStatus.Waiting => Color.Info, 
        QueueUserStatus.Finished => Color.Success,
        _ => Color.Error
    };
    
    private string GetStatusText(QueueUserStatus status, string? adminName) => status switch
    {
        QueueUserStatus.Waiting => "В очереди",
        QueueUserStatus.Skipped => "Пропущен",
        QueueUserStatus.Checking => $"Сдаёт ({adminName ?? "admin"})",
        QueueUserStatus.Finished => "Завершил",
        _ => "Неизвестно"
    };

    private string GetRowStyle(QueueParticipantDetailDto student)
    {
        if (ThemeService.IsDarkMode)
        {
            return student.Status switch
            {
                QueueUserStatus.Checking => "background-color: #424242;",
                QueueUserStatus.Finished => "background-color: #212121; color: #757575;",
                _ => string.Empty
            };
        }
        else
        {
            return student.Status switch
            {
                QueueUserStatus.Checking => "background-color: #E3F2FD;",
                QueueUserStatus.Finished => "background-color: #F5F5F5; color: #BDBDBD;",
                _ => string.Empty
            };
        }
    }
}
