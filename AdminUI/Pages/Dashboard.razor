@page "/student/dashboard"
@layout StudentLayout
@attribute [Authorize(Roles = "Student")]
@inject HttpClient Http
@inject ISnackbar Snackbar


<PageTitle>Результаты</PageTitle>

<MudText Typo="Typo.h4">Результаты</MudText>

<MudSelect T="SubjectDto" ValueChanged="OnSubjectSelected" Label="Выберите предмет" Class="my-4" Variant="Variant.Outlined">
    @foreach (var subject in _subjects) { <MudSelectItem T="SubjectDto" Value="subject">@subject.Name</MudSelectItem> }
</MudSelect>

@if (_isResultsLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_results != null)
{
    @* --- НАЧАЛО БЛОКА ИЗМЕНЕНИЙ --- *@
    <MudDataGrid T="UserResultDto" Items="@_results.UserResults" Sortable="true" Filterable="true" Dense="true"
                 MultiSort="true" InitialSort="_initialSortDefinitions">
        <Columns>
            <PropertyColumn Property="x => x.FullName" Title="ФИО" Sortable="true" />
            <PropertyColumn Property="x => x.GroupName" Title="Группа" Sortable="true" />
            
            @foreach (var taskHeader in _results.TaskHeaders)
            {
                <TemplateColumn Title="@taskHeader.TaskName" Sortable="false">
                    <CellTemplate>
                         @{
                             var cell = context.Item.Results[taskHeader.TaskId];
                             var display = cell.Status == SubmissionStatus.Accepted ? "+" : cell.DisplayValue;
                         }
                        <div style="background-color: @(cell.AdminColor ?? "transparent"); text-align: center;">
                            @display
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            }

            @* 1. Упрощаем определение колонки, убрав некорректный SortBy *@
            <PropertyColumn Property="x => x.TotalPoints" Title="Σ Баллы" />

        </Columns>
    </MudDataGrid>
    @* --- КОНЕЦ БЛОКА ИЗМЕНЕНИЙ --- *@
}

@code {
    private List<SubjectDto> _subjects = new();
    private SubjectResultsDto _results;
    private bool _isResultsLoading = false;

    private List<SortDefinition<UserResultDto>> _initialSortDefinitions;

    public Dashboard() 
    {
        _initialSortDefinitions = new()
        {
            new SortDefinition<UserResultDto>("GroupName", false, 0, x => x.GroupName),
            new SortDefinition<UserResultDto>("FullName", false, 1, x => x.FullName),
            new SortDefinition<UserResultDto>("TotalPoints", true, 2, x => x.TotalPoints)
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("/api/Users/me/subjects");
    }

    private async Task OnSubjectSelected(SubjectDto selectedSubject)
    {
        if (selectedSubject == null) return;

        _isResultsLoading = true;
        _results = null; // Показываем загрузку
        StateHasChanged();

        try
        {
            // Здесь нужен ваш реальный DTO, который приходит с сервера
            _results = await Http.GetFromJsonAsync<SubjectResultsDto>($"/api/cached/results/subject/{selectedSubject.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Не удалось загрузить результаты: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isResultsLoading = false;
            StateHasChanged();
        }
    }
}