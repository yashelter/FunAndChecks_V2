@layout AdminMainLayout
@page "/admin/destructive-operations"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Удаление сущностей</PageTitle>
<MudText Typo="Typo.h4" Color="Color.Error" GutterBottom="true">Опасная зона: Удаление сущностей</MudText>
<MudText Typo="Typo.body1" GutterBottom="true">Действия на этой странице необратимы. Пожалуйста, будьте внимательны.</MudText>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudGrid Class="mt-6">
        @* --- Удаление Предмета --- *@
        <MudItem xs="12" md="6">
            <MudCard Elevation="4">
                <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Удалить предмет</MudText></CardHeaderContent></MudCardHeader>
                <MudCardContent>
                    <MudAlert Severity="Severity.Warning" Class="mb-4">ВНИМАНИЕ: Это приведет к каскадному удалению всех связанных заданий и их истории сдачи.</MudAlert>
                    <MudSelect T="int" @bind-Value="_subjectIdToDelete" Label="Выберите предмет для удаления" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var subject in _allSubjects) { <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem> }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="HandleDeleteSubject" Disabled="@(_subjectIdToDelete == 0)">Удалить предмет</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        @* --- Удаление Группы --- *@
        <MudItem xs="12" md="6">
            <MudCard Elevation="4">
                <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Удалить группу</MudText></CardHeaderContent></MudCardHeader>
                <MudCardContent>
                    <MudAlert Severity="Severity.Info" Class="mb-4">Пользователи из этой группы не будут удалены, а станут "без группы".</MudAlert>
                    <MudSelect T="int" @bind-Value="_groupIdToDelete" Label="Выберите группу для удаления" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var group in _allGroups) { <MudSelectItem T="int" Value="@group.Id">@group.Name</MudSelectItem> }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="HandleDeleteGroup" Disabled="@(_groupIdToDelete == 0)">Удалить группу</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        @* --- Удаление Задачи --- *@
        <MudItem xs="12" md="6">
            <MudCard Elevation="4">
                <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Удалить задачу</MudText></CardHeaderContent></MudCardHeader>
                <MudCardContent>
                    <MudAlert Severity="Severity.Warning" Class="mb-4">ВНИМАНИЕ: Это приведет к каскадному удалению всей истории сдачи этого задания.</MudAlert>
                    <MudSelect T="int" ValueChanged="OnSubjectForTaskDeletionChanged" Label="1. Сначала выберите предмет" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                         @foreach (var subject in _allSubjects) { <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem> }
                    </MudSelect>
                    <MudSelect T="int" @bind-Value="_taskIdToDelete" Label="2. Затем выберите задачу" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Disabled="@(_tasksForSelectedSubject.Count == 0)">
                         @foreach (var task in _tasksForSelectedSubject) { <MudSelectItem T="int" Value="@task.Id">@task.Name</MudSelectItem> }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="HandleDeleteTask" Disabled="@(_taskIdToDelete == 0)">Удалить задачу</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        @* --- Отвязка Группы от Предмета --- *@
        <MudItem xs="12" md="6">
            <MudCard Elevation="4">
                <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Отвязать группу от предмета</MudText></CardHeaderContent></MudCardHeader>
                <MudCardContent>
                     <MudSelect T="int" @bind-Value="_unlinkSubjectId" Label="Выберите предмет" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var subject in _allSubjects) { <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem> }
                    </MudSelect>
                    <MudSelect T="int" @bind-Value="_unlinkGroupId" Label="Выберите группу" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var group in _allGroups) { <MudSelectItem T="int" Value="@group.Id">@group.Name</MudSelectItem> }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="HandleUnlink" Disabled="@(_unlinkSubjectId == 0 || _unlinkGroupId == 0)">Отозвать доступ</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}


@code {
    private bool _isLoading = true;

    // Списки для выпадающих меню
    private List<SubjectDto> _allSubjects = new();
    private List<GroupDto> _allGroups = new();
    private List<TaskDto> _tasksForSelectedSubject = new();

    // Переменные для хранения выбранных ID
    private int _subjectIdToDelete;
    private int _groupIdToDelete;
    private int _taskIdToDelete;
    private int _unlinkSubjectId;
    private int _unlinkGroupId;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        _isLoading = false;
    }

    private async Task LoadInitialData()
    {
        try
        {
            var subjectsTask = Http.GetFromJsonAsync<List<SubjectDto>>("/api/Public/get-all/subjects");
            var groupsTask = Http.GetFromJsonAsync<List<GroupDto>>("/api/Public/get-all/groups");
            await Task.WhenAll(subjectsTask, groupsTask);
            _allSubjects = subjectsTask.Result ?? new();
            _allGroups = groupsTask.Result ?? new();
        }
        catch (Exception ex) { Snackbar.Add($"Ошибка загрузки данных: {ex.Message}", Severity.Error); }
    }
    
    private async Task OnSubjectForTaskDeletionChanged(int selectedSubjectId)
    {
        _taskIdToDelete = 0; // Сбрасываем выбор задачи
        _tasksForSelectedSubject.Clear();
        if (selectedSubjectId == 0) return;
        
        try
        {
            _tasksForSelectedSubject = await Http.GetFromJsonAsync<List<TaskDto>>($"/api/Public/get-all/tasks/{selectedSubjectId}");
        }
        catch { Snackbar.Add("Не удалось загрузить задачи для этого предмета", Severity.Error); }
        StateHasChanged();
    }
    
    private async Task HandleDeleteSubject()
    {
        var subjectName = _allSubjects.FirstOrDefault(s => s.Id == _subjectIdToDelete)?.Name;
        bool? result = await DialogService.ShowMessageBox(
            "Подтвердите удаление", 
            $"Вы уверены, что хотите НАВСЕГДА удалить предмет '{subjectName}'? Все связанные с ним задачи и история будут также удалены.", 
            yesText:"Удалить!", cancelText:"Отмена", options: new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall });

        if (result != true) return;

        var response = await Http.DeleteAsync($"/api/Admin/subjects/{_subjectIdToDelete}/permanently");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Предмет '{subjectName}' удален.", Severity.Success);
            _subjectIdToDelete = 0;
            await LoadInitialData(); // Обновляем списки
        }
        else { Snackbar.Add("Ошибка при удалении предмета.", Severity.Error); }
    }

    private async Task HandleDeleteGroup()
    {
        var groupName = _allGroups.FirstOrDefault(g => g.Id == _groupIdToDelete)?.Name;
        bool? result = await DialogService.ShowMessageBox(
            "Подтвердите удаление", 
            $"Вы уверены, что хотите удалить группу '{groupName}'?", 
            yesText:"Удалить!", cancelText:"Отмена");
        
        if (result != true) return;
        
        var response = await Http.DeleteAsync($"/api/Admin/groups/{_groupIdToDelete}/permanently");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Группа '{groupName}' удалена.", Severity.Success);
            _groupIdToDelete = 0;
            await LoadInitialData();
        }
        else { Snackbar.Add("Ошибка при удалении группы.", Severity.Error); }
    }

    private async Task HandleDeleteTask()
    {
        var taskName = _tasksForSelectedSubject.FirstOrDefault(t => t.Id == _taskIdToDelete)?.Name;
        bool? result = await DialogService.ShowMessageBox(
            "Подтвердите удаление", 
            $"Вы уверены, что хотите НАВСЕГДА удалить задачу '{taskName}'? Вся история сдачи будет удалена.", 
            yesText:"Удалить!", cancelText:"Отмена");

        if (result != true) return;

        var response = await Http.DeleteAsync($"/api/Admin/tasks/{_taskIdToDelete}/permanently");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Задача '{taskName}' удалена.", Severity.Success);
            _taskIdToDelete = 0;
            _tasksForSelectedSubject.RemoveAll(t => t.Id == _taskIdToDelete); // Локальное обновление для скорости
        }
        else { Snackbar.Add("Ошибка при удалении задачи.", Severity.Error); }
    }

    private async Task HandleUnlink()
    {
         var subjectName = _allSubjects.FirstOrDefault(s => s.Id == _unlinkSubjectId)?.Name;
         var groupName = _allGroups.FirstOrDefault(g => g.Id == _unlinkGroupId)?.Name;
         bool? result = await DialogService.ShowMessageBox(
            "Подтвердите действие", 
            $"Вы уверены, что хотите отозвать доступ группы '{groupName}' к предмету '{subjectName}'?", 
            yesText:"Да, отозвать!", cancelText:"Отмена");

        if (result != true) return;
        
        var response = await Http.DeleteAsync($"/api/Admin/unlink/group-from-subject?GroupId={_unlinkGroupId}&SubjectId={_unlinkSubjectId}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Доступ успешно отозван.", Severity.Success);
            _unlinkGroupId = 0;
            _unlinkSubjectId = 0;
        }
        else { Snackbar.Add("Ошибка при отзыве доступа.", Severity.Error); }
    }
}