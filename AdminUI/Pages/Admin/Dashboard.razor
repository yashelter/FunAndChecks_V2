@page "/admin/dashboard"
@using System.Text
@layout AdminMainLayout
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject FileDownloader FileDownloader


<PageTitle>Результаты</PageTitle>

<MudText Typo="Typo.h4">Результаты</MudText>

<MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="my-4">
    <MudItem xs="12" sm="6" md="4">
        <MudSelect T="SubjectDto" ValueChanged="OnSubjectSelected" Label="Выберите предмет" Variant="Variant.Outlined">
            @foreach (var subject in _subjects) { <MudSelectItem T="SubjectDto" Value="subject">@subject.Name</MudSelectItem> }
        </MudSelect>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.CloudDownload"
                   OnClick="ExportToCsv"
                   Disabled="@(_results == null || !_results.UserResults.Any())">
            Скачать CSV
        </MudButton>
    </MudItem>
</MudGrid>


@if (_isResultsLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_results != null)
{
    <MudDataGrid T="UserResultDto" Items="@_results.UserResults" Sortable="true" Filterable="true" Dense="true"
                 MultiSort="true" InitialSort="_initialSortDefinitions">
        <Columns>
            <PropertyColumn Property="x => x.FullName" Title="ФИО" Sortable="true" />
            <PropertyColumn Property="x => x.GroupName" Title="Группа" Sortable="true" />
            
            @foreach (var taskHeader in _results.TaskHeaders)
            {
                <TemplateColumn Title="@taskHeader.TaskName" Sortable="false">
                    <CellTemplate>
                         @{
                             var cell = context.Item.Results[taskHeader.TaskId];
                             var display = cell.Status == SubmissionStatus.Accepted ? "+" : cell.DisplayValue;
                         }
                        <div style="background-color: @(cell.AdminColor ?? "transparent"); text-align: center;">
                            @display
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            }

            <PropertyColumn Property="x => x.TotalPoints" Title="Σ Баллы" />

        </Columns>
    </MudDataGrid>
}

@code {
    private List<SubjectDto> _subjects = new();
    private SubjectResultsDto _results;
    private bool _isResultsLoading = false;

    private List<SortDefinition<UserResultDto>> _initialSortDefinitions;

    private MudDataGrid<UserResultDto> _dataGrid;
    
    public Dashboard() 
    {
        _initialSortDefinitions = new()
        {
            new SortDefinition<UserResultDto>("GroupName", false, 0, x => x.GroupName),
            new SortDefinition<UserResultDto>("FullName", false, 1, x => x.FullName),
            new SortDefinition<UserResultDto>("TotalPoints", true, 2, x => x.TotalPoints)
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("/api/Public/get-all/subjects");
    }

    private async Task OnSubjectSelected(SubjectDto selectedSubject)
    {
        if (selectedSubject == null) return;

        _isResultsLoading = true;
        _results = null;
        StateHasChanged();

        try
        {
            _results = await Http.GetFromJsonAsync<SubjectResultsDto>($"/api/cached/results/subject/{selectedSubject.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Не удалось загрузить результаты: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isResultsLoading = false;
            StateHasChanged();
        }
    }
    private async Task ExportToCsv()
    {
        if (_dataGrid == null || _results == null) return;
        
        var sb = new StringBuilder();
        var delimiter = ";";
        
        var headers = new List<string> { "ФИО", "Группа" };
        headers.AddRange(_results.TaskHeaders.Select(th => th.TaskName));
        headers.Add("Σ Баллы");
        sb.AppendLine(string.Join(delimiter, headers));
        
        var filteredData =  _dataGrid.FilteredItems;

        foreach (var userResult in filteredData)
        {
            var row = new List<string>
            {
                userResult.FullName,
                userResult.GroupName
            };

            foreach (var taskHeader in _results.TaskHeaders)
            {
                var cell = userResult.Results[taskHeader.TaskId];
                var display = cell.Status == SubmissionStatus.Accepted ? "+" : cell.DisplayValue;
                row.Add(display);
            }

            row.Add(userResult.TotalPoints.ToString());
            sb.AppendLine(string.Join(delimiter, row));
        }
        
        var csvBytes = Encoding.UTF8.GetBytes(sb.ToString());
        using var stream = new MemoryStream(csvBytes);
        
        var fileName = $"Results_{_results.SubjectName}_{DateTime.Now:yyyy-MM-dd}.csv";
        await FileDownloader.DownloadFileFromStreamAsync(fileName, stream);
        
        Snackbar.Add("Экспорт в CSV завершен.", Severity.Success);
    }
}