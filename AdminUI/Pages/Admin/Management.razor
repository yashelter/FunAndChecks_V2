@layout AdminMainLayout
@page "/admin/management"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ISnackbar Snackbar
@using System.Text.RegularExpressions

<PageTitle>Управление</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Панель управления</MudText>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTabs Elevation="3" Rounded="true" Centered="true">
        <MudTabPanel Text="Предметы и Группы">
            <MudGrid Class="mt-4">
                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Создать предмет</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudForm @ref="_subjectForm">
                                <MudTextField @bind-Value="_createSubjectDto.Name" Label="Название предмета" Variant="Variant.Outlined" Required="true" RequiredError="Название обязательно!" />
                            </MudForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCreateSubject">Создать</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

                @* --- БЛОК СОЗДАНИЯ ГРУППЫ ПОЛНОСТЬЮ ИЗМЕНЕН --- *@
                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Создать группу</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudForm @ref="_groupForm">
                                <MudTextField @bind-Value="_groupInputString" Label="Название группы" Variant="Variant.Outlined" Required="true" HelperText="Формат: М8О-116БВ-21" />
                            </MudForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCreateGroup">Создать</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        <MudTabPanel Text="Задачи и Очереди">
             <MudGrid Class="mt-4">
                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Создать задачу</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                             <MudForm @ref="_taskForm">
                                <MudSelect T="int" @bind-Value="_createTaskDto.SubjectId" Label="Предмет" Variant="Variant.Outlined" Required="true">
                                    @foreach (var subject in _allSubjects) { <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem> }
                                </MudSelect>
                                <MudTextField @bind-Value="_createTaskDto.Name" Label="Название задачи" Variant="Variant.Outlined" Required="true" />
                                <MudTextField @bind-Value="_createTaskDto.Description" Label="Описание" Variant="Variant.Outlined" Lines="3" />
                                <MudNumericField @bind-Value="_createTaskDto.MaxPoints" Label="Максимум баллов" Variant="Variant.Outlined" Required="true" />
                            </MudForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCreateTask">Создать</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                 <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Создать событие (очередь)</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                             <MudForm @ref="_queueForm">
                                <MudSelect T="int" @bind-Value="_createQueueDto.SubjectId" Label="Предмет" Variant="Variant.Outlined" Required="true">
                                     @foreach (var subject in _allSubjects) { <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem> }
                                </MudSelect>
                                <MudTextField @bind-Value="_createQueueDto.Name" Label="Название события" Variant="Variant.Outlined" Required="true" HelperText="Например, 'Пересдача №1'" />
                                <MudDatePicker @bind-Date="_queueEventDate" Label="Дата события" Variant="Variant.Outlined" Required="true"/>
                                <MudTimePicker @bind-Time="_queueEventTime" Label="Время события" Variant="Variant.Outlined" Required="true"/>
                            </MudForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCreateQueueEvent">Создать</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        
        <MudTabPanel Text="Связи">
            <MudGrid Class="mt-4" Justify="Justify.Center">
                <MudItem xs="12" md="8">
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Дать группе доступ к предмету</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudForm @ref="_linkForm">
                                <MudSelect T="int" @bind-Value="_linkDto.SubjectId" Label="Выберите предмет" Variant="Variant.Outlined" Required="true">
                                    @foreach (var subject in _allSubjects) { <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem> }
                                </MudSelect>
                                <MudSelect T="int" @bind-Value="_linkDto.GroupId" Label="Выберите группу" Variant="Variant.Outlined" Required="true">
                                     @foreach (var group in _allGroups) { <MudSelectItem T="int" Value="@group.Id">@group.Name</MudSelectItem> }
                                </MudSelect>
                            </MudForm>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleLink">Связать</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>
}

@code {
    private bool _isLoading = true;

    // Ссылки на формы для валидации
    private MudForm _subjectForm, _groupForm, _taskForm, _queueForm, _linkForm;

    // Модели для хранения данных из форм
    private CreateSubjectDto _createSubjectDto = new();
    private CreateGroupDto _createGroupDto = new();
    private CreateTaskDto _createTaskDto = new();
    private CreateQueueEventDto _createQueueDto = new();
    private LinkGroupToSubjectDto _linkDto = new();
    
    // Вспомогательные поля
    private DateTime? _queueEventDate = DateTime.Today;
    private TimeSpan? _queueEventTime = new TimeSpan(10, 0, 0);
    private string _groupInputString; // Для новой логики создания группы

    // Списки для выпадающих меню
    private List<SubjectDto> _allSubjects = new();
    private List<GroupDto> _allGroups = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        _isLoading = false;
    }

    private async Task LoadInitialData()
    {
        try
        {
            var subjectsTask = Http.GetFromJsonAsync<List<SubjectDto>>("/api/Public/get-all/subjects");
            var groupsTask = Http.GetFromJsonAsync<List<GroupDto>>("/api/Public/get-all/groups");
            await Task.WhenAll(subjectsTask, groupsTask);
            _allSubjects = subjectsTask.Result;
            _allGroups = groupsTask.Result;
        }
        catch (Exception ex) { Snackbar.Add($"Ошибка загрузки данных: {ex.Message}", Severity.Error); }
    }
    
    // --- НОВАЯ ЛОГИКА СОЗДАНИЯ ГРУППЫ ---
    private async Task HandleCreateGroup()
    {
        await _groupForm.Validate();
        if (!_groupForm.IsValid) return;

        var parsedValues = ParseGroupString(_groupInputString);
        if (parsedValues == null)
        {
            Snackbar.Add("Неверный формат названия группы!", Severity.Warning);
            return;
        }

        // Заполняем DTO из распарсенных значений
        var createGroupDto = new CreateGroupDto
        {
            Name = _groupInputString,
            GroupNumber = parsedValues.Value.YY,
            StartYear = parsedValues.Value.ZZ + 2000 // Преобразуем 21 в 2021
        };

        var response = await Http.PostAsJsonAsync("/api/Admin/create/group", createGroupDto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Группа успешно создана!", Severity.Success);
            _groupInputString = ""; // Очищаем поле ввода
            await LoadInitialData(); // Обновляем список групп
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Ошибка при создании группы", Severity.Error);
        }
    }

    // Копируем вашу утилиту для парсинга прямо сюда
    private static (int X, int YY, int ZZ)? ParseGroupString(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return null;
        
        const string pattern = @"^М8О-(?<x>\d{1})(?<yy>\d{2})(?<uu>Б|БВ)-(?<zz>\d{2})$";
        var regex = new Regex(pattern, RegexOptions.IgnoreCase);
        Match match = regex.Match(input);

        if (match.Success)
        {
            try
            {
                int x = int.Parse(match.Groups["x"].Value);
                int yy = int.Parse(match.Groups["yy"].Value);
                int zz = int.Parse(match.Groups["zz"].Value);
                return (x, yy, zz);
            }
            catch (FormatException) { return null; }
        }
        return null;
    }

    // --- Остальные обработчики без изменений ---
    private async Task HandleCreateSubject()
    {
        await _subjectForm.Validate();
        if (!_subjectForm.IsValid) return;

        var response = await Http.PostAsJsonAsync("/api/Admin/create/subject", _createSubjectDto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Предмет успешно создан!", Severity.Success);
            _createSubjectDto = new();
            await LoadInitialData();
            StateHasChanged();
        }
        else { Snackbar.Add("Ошибка при создании предмета", Severity.Error); }
    }

    private async Task HandleCreateTask()
    {
        await _taskForm.Validate();
        if (!_taskForm.IsValid) return;

        var response = await Http.PostAsJsonAsync("/api/Admin/create/task", _createTaskDto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Задача успешно создана!", Severity.Success);
            _createTaskDto = new();
            StateHasChanged();
        }
        else { Snackbar.Add("Ошибка при создании задачи", Severity.Error); }
    }

    private async Task HandleCreateQueueEvent()
    {
        await _queueForm.Validate();
        if (!_queueForm.IsValid) return;

        if (_queueEventDate.HasValue && _queueEventTime.HasValue)
        {
            _createQueueDto.EventDateTime = _queueEventDate.Value.Date + _queueEventTime.Value;
            _createQueueDto.EventDateTime = _createQueueDto.EventDateTime.ToUniversalTime();
        }
        else
        {
            Snackbar.Add("Пожалуйста, выберите дату и время", Severity.Warning);
            return;
        }

        var response = await Http.PostAsJsonAsync("/api/Admin/create/queue-event", _createQueueDto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Событие успешно создано!", Severity.Success);
            _createQueueDto = new();
            StateHasChanged();
        }
        else { Snackbar.Add("Ошибка при создании события", Severity.Error); }
    }

    private async Task HandleLink()
    {
        await _linkForm.Validate();
        if (!_linkForm.IsValid) return;

        var response = await Http.PostAsJsonAsync("/api/Admin/link/group-to-subject", _linkDto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Группа успешно привязана к предмету!", Severity.Success);
            _linkDto = new();
            StateHasChanged();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Ошибка: {error}", Severity.Error);
        }
    }
}