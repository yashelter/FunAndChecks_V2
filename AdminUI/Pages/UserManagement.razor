@layout AdminMainLayout
@page "/admin/user-management"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using AdminUI.Layout.Dialogs

<PageTitle>Управление пользователями</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">Поиск и управление пользователем</MudText>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudGrid>
        @* --- Шаг 1: Выбор Группы и Пользователя --- *@
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" GutterBottom="true">1. Выбор пользователя</MudText>
                <MudSelect T="int" ValueChanged="OnGroupChanged" Label="Сначала выберите группу" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var group in _allGroups)
                    {
                        <MudSelectItem T="int" Value="@group.Id">@group.Name</MudSelectItem>
                    }
                </MudSelect>
                
                <MudAutocomplete T="UserDto" @bind-Value="_selectedUser" Label="Найдите пользователя" SearchFunc="@SearchUser"
                                 ToStringFunc="@(u => u == null ? null : $"{u.LastName} {u.Name}")"
                                 Variant="Variant.Outlined" Class="mt-4" Disabled="@(_usersInSelectedGroup.Count == 0)"
                                 ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false" />
            </MudPaper>
        </MudItem>

        @* --- Шаг 2: Работа с выбранным пользователем --- *@
        <MudItem xs="12" md="8">
            @if (_selectedUser != null)
            {
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6" GutterBottom="true">2. Работа с пользователем: <b>@_selectedUser.LastName @_selectedUser.Name</b></MudText>
                    <MudGrid>
                        @* --- Область выставления задачи --- *@
                        <MudItem xs="12" lg="6">
                            <MudText Typo="Typo.subtitle1">Выставить оценку</MudText>
                            <MudSelect T="int" ValueChanged="OnSubjectChanged" Label="Выберите предмет" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="mt-2">
                                @foreach (var subject in _allSubjects)
                                {
                                    <MudSelectItem T="int" Value="@subject.Id">@subject.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect T="int?" @bind-Value="_selectedTaskId" Label="Выберите задачу" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="mt-4" Disabled="@(_tasksForSelectedSubject.Count == 0)">
                                @foreach (var task in _tasksForSelectedSubject)
                                {
                                    <MudSelectItem T="int?" Value="@task.Id">@task.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <div class="d-flex gap-2 mt-4">
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => HandleSubmitTaskStatus(SubmissionStatus.Accepted))" Disabled="@(_selectedTaskId == null)">Зачтено</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => HandleSubmitTaskStatus(SubmissionStatus.Rejected))" Disabled="@(_selectedTaskId == null)">На доработку</MudButton>
                            </div>
                        </MudItem>

                        @* --- Область отображения логов --- *@
                        <MudItem xs="12" lg="6">
                            @if (_selectedTaskId != null)
                            {
                                <MudText Typo="Typo.subtitle1">История по задаче: <b>@_tasksForSelectedSubject.FirstOrDefault(t => t.Id == _selectedTaskId)?.Name</b></MudText>
                                @if (_isLogLoading)
                                {
                                    <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                                }
                                else if (_logsForSelectedTask.Any())
                                {
                                    <MudList T="TaskLog" Dense="true" Class="mt-2">
                                        @foreach(var log in _logsForSelectedTask.OrderByDescending(l => l.SubmissionDate))
                                        {
                                            <MudListItem T="TaskLog" Icon="@(log.Status == SubmissionStatus.Accepted ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)" IconColor="@(log.Status == SubmissionStatus.Accepted ? Color.Success : Color.Error)">
                                                "@log.Comment" - @log.Admin?.LastName (@log.SubmissionDate.ToLocalTime().ToString("g"))
                                            </MudListItem>
                                        }
                                    </MudList>
                                }
                                else
                                {
                                    <MudText Class="mt-2"><i>История проверок отсутствует.</i></MudText>
                                }
                            }
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
            else
            {
                 <div class="d-flex align-center justify-center" style="height:100%">
                    <MudText Typo="Typo.h6" Color="Color.Dark"><i>Пользователь не выбран</i></MudText>
                </div>
            }
        </MudItem>
    </MudGrid>
}


@code {
    private bool _isLoading = true;

    // Списки для селекторов
    private List<GroupDto> _allGroups = new();
    private List<UserDto> _usersInSelectedGroup = new();
    private List<SubjectDto> _allSubjects = new();
    private List<TaskDto> _tasksForSelectedSubject = new();
    private List<TaskLog> _logsForSelectedTask = new();

    // Переменные состояния
    private UserDto _selectedUser;
    private int _selectedSubjectId;
    private int? _selectedTaskId;
    private bool _isLogLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var groupsTask = Http.GetFromJsonAsync<List<GroupDto>>("/api/Public/get-all/groups");
            var subjectsTask = Http.GetFromJsonAsync<List<SubjectDto>>("/api/Public/get-all/subjects");
            await Task.WhenAll(groupsTask, subjectsTask);
            _allGroups = groupsTask.Result ?? new();
            _allSubjects = subjectsTask.Result ?? new();
        }
        catch (Exception ex) { Snackbar.Add($"Ошибка загрузки начальных данных: {ex.Message}", Severity.Error); }
        _isLoading = false;
    }

    private async Task OnGroupChanged(int groupId)
    {
        // Сбрасываем все последующие выборы
        _selectedUser = null;
        _usersInSelectedGroup.Clear();
        _selectedTaskId = null;
        _logsForSelectedTask.Clear();
        
        if (groupId == 0) return;

        try
        {
            _usersInSelectedGroup = await Http.GetFromJsonAsync<List<UserDto>>($"/api/Public/get-all/users/{groupId}");
        }
        catch { Snackbar.Add("Не удалось загрузить пользователей группы", Severity.Error); }
    }

    private async Task<IEnumerable<UserDto>>? SearchUser(string? value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _usersInSelectedGroup;

        return _usersInSelectedGroup.Where(u => $"{u.LastName} {u.Name}".Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task OnSubjectChanged(int subjectId)
    {
        _selectedSubjectId = subjectId;
        _selectedTaskId = null; // Сбрасываем выбор задачи
        _logsForSelectedTask.Clear();
        _tasksForSelectedSubject.Clear();

        if (subjectId == 0) return;

        try
        {
            _tasksForSelectedSubject = await Http.GetFromJsonAsync<List<TaskDto>>($"/api/Public/get-all/tasks/{subjectId}");
        }
        catch { Snackbar.Add("Не удалось загрузить задачи для этого предмета", Severity.Error); }
    }
    
    // Используем Watch-паттерн для отслеживания изменения _selectedTaskId
    private int? _oldSelectedTaskId;
    protected override async Task OnParametersSetAsync()
    {
        if (_selectedTaskId != _oldSelectedTaskId)
        {
            _oldSelectedTaskId = _selectedTaskId;
            await LoadTaskLogs();
        }
    }

    private async Task LoadTaskLogs()
    {
        _logsForSelectedTask.Clear();
        if (_selectedUser == null || _selectedTaskId == null || _selectedTaskId == 0)
        {
            return;
        }

        _isLogLoading = true;
        try
        {
            var logs = await Http.GetFromJsonAsync<List<TaskLog>>($"/api/Admin/get/user/{_selectedUser.Id}/task-logs/{_selectedTaskId}");
            _logsForSelectedTask = logs ?? new();
        }
        catch { Snackbar.Add("Не удалось загрузить историю задачи", Severity.Error); }
        finally
        {
            _isLogLoading = false;
            StateHasChanged(); // Уведомляем UI об изменениях
        }
    }

    private async Task HandleSubmitTaskStatus(SubmissionStatus status)
    {
        if (_selectedUser == null || _selectedTaskId == null) return;
        
        string comment = "";
        if (status == SubmissionStatus.Rejected)
        {
            var dialog = DialogService.Show<CommentDialog>("Комментарий к доработке");
            var result = await dialog.Result;
            if (result.Canceled) return; // Пользователь отменил ввод
            comment = result.Data.ToString();
        }

        var dto = new 
        { 
            userId = _selectedUser.Id, 
            taskId = _selectedTaskId.Value, 
            status, 
            comment 
        };

        var response = await Http.PostAsJsonAsync("/api/Admin/create/submission", dto);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Статус задачи обновлен", Severity.Success);
            await LoadTaskLogs(); // Перезагружаем логи, чтобы увидеть новую запись
        }
        else { Snackbar.Add("Ошибка: не удалось обновить статус задачи", Severity.Error); }
    }
}