@page "/queue/{EventId:int}"
@attribute [Authorize]
@implements IAsyncDisposable
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ThemeService ThemeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using AdminUI.Layout.Dialogs
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.RegularExpressions
@using System.Globalization

<PageTitle>Очередь: @_queueDetails?.EventName</PageTitle>

@if (_isLoading)
{
    <div class="d-flex justify-center align-center" style="height: 50vh;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else if (_queueDetails != null)
{
    <MudText Typo="Typo.h4">@_queueDetails.EventName</MudText>
    <MudText Typo="Typo.subtitle1" GutterBottom="true">Предмет: @_queueDetails.SubjectName</MudText>

    <MudList T="QueueParticipantDetailDto" Clickable="true">
        @foreach (var student in _sortedParticipants)
        {
            <MudListItem T="QueueParticipantDetailDto" Item="student" OnClick="@((e) => OnStudentClick(student))" Style="@GetRowStyle(student)">
                @* --- НАЧАЛО ОБНОВЛЕННОГО БЛОКА UI --- *@
                <div class="d-flex justify-space-between align-center flex-grow-1">
                    <div class="d-flex flex-column">
                        <div class="d-flex align-center gap-2">
                            <div style="background-color: @student.Color; color: @GetTextColorForBackground(student.Color); border-radius: 16px; padding: 4px 12px; font-weight: 500;">
                                @student.LastName @student.FirstName
                            </div>
                            <MudChip Label="true" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Info">@ParseGroupNumber(student.GroupName)</MudChip>
                        </div>
                        <MudText Typo="Typo.caption" Class="d-block d-sm-none mt-1 ml-2">Баллы: <b>@student.TotalPoints</b></MudText>
                    </div>

                    <div class="d-flex align-center gap-2">
                        <MudText Class="d-none d-sm-block mr-2">Баллы: <b>@student.TotalPoints</b></MudText>
                        <MudChip Color="@GetStatusColor(student.Status)" Size="Size.Small" Variant="Variant.Text">@GetStatusText(student.Status, student.CheckingByAdminName)</MudChip>
                    </div>
                </div>
                @* --- КОНЕЦ ОБНОВЛЕННОГО БЛОКА UI --- *@
            </MudListItem>
            <MudDivider />
        }
    </MudList>

    @if (!_sortedParticipants.Any())
    {
        <MudAlert Severity="Severity.Info" Class="mt-4">В очереди нет участников.</MudAlert>
    }
}
else
{
    <MudAlert Severity="Severity.Error">Не удалось загрузить данные очереди.</MudAlert>
}

@code {
    [Parameter]
    public int EventId { get; set; }

    private QueueDetailsDto _queueDetails;
    private List<QueueParticipantDetailDto> _sortedParticipants = new();
    private bool _isLoading = true;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadQueueDetails();
        await InitializeSignalR();
    }

    private async Task LoadQueueDetails()
    {
        try
        {
            _queueDetails = await Http.GetFromJsonAsync<QueueDetailsDto>($"/api/Public/get/queue/{EventId}");
            if (_queueDetails != null)
            {
                _sortedParticipants = _queueDetails.Participants
                    .OrderBy(p => p.Status)
                    .ThenByDescending(p => p.TotalPoints)
                    .ToList();
            }
        }
        catch
        {
            Snackbar.Add("Ошибка загрузки данных очереди", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task InitializeSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/queueHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<QueueUserUpdateDto>("QueueUserUpdated", (updateDto) =>
        {
            return InvokeAsync(async () =>
            {
                Snackbar.Add("Очередь обновлена!", Severity.Info);
                await LoadQueueDetails();
            });
        });
        try
        {
            await _hubConnection.StartAsync();
            await _hubConnection.InvokeAsync("SubscribeToQueue", EventId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Не удалось подключиться к хабу: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnStudentClick(QueueParticipantDetailDto student)
    {
        var parameters = new DialogParameters
        {
            ["Student"] = student,
            ["EventId"] = EventId,
            ["SubjectId"] = _queueDetails.SubjectId
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<StudentInteractionDialog>("Работа со студентом", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadQueueDetails();
        }
    }
    
    // --- НАЧАЛО БЛОКА НОВЫХ И ОБНОВЛЕННЫХ HELPER-МЕТОДОВ ---

    private string ParseGroupNumber(string groupName)
    {
        if (string.IsNullOrEmpty(groupName)) return "?";
        var match = Regex.Match(groupName, @"-(?<num>\d{3})(?:Б|БВ)-");
        return match.Success ? match.Groups["num"].Value : groupName;
    }

    private string GetTextColorForBackground(string hexColor)
    {
        if (string.IsNullOrEmpty(hexColor) || hexColor.Length != 7 || !hexColor.StartsWith("#"))
        {
            return "#000000"; // Возвращаем черный по умолчанию
        }
        try
        {
            int r = int.Parse(hexColor.Substring(1, 2), NumberStyles.HexNumber);
            int g = int.Parse(hexColor.Substring(3, 2), NumberStyles.HexNumber);
            int b = int.Parse(hexColor.Substring(5, 2), NumberStyles.HexNumber);
            // Формула для определения яркости
            double luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
            return luminance > 0.5 ? "#000000" : "#FFFFFF"; // Темный текст на светлом фоне, светлый на темном
        }
        catch
        {
            return "#000000";
        }
    }

    private Color GetStatusColor(QueueUserStatus status) => status switch
    {
        QueueUserStatus.Checking => Color.Default,
        QueueUserStatus.Skipped => Color.Warning,
        QueueUserStatus.Waiting => Color.Info,
        QueueUserStatus.Finished => Color.Success,
        _ => Color.Error
    };

    private string GetRowStyle(QueueParticipantDetailDto student)
    {
        if (ThemeService.IsDarkMode)
        {
            return student.Status switch
            {
                QueueUserStatus.Checking => "background-color: " + "#163642"+ ";",
                QueueUserStatus.Finished => "background-color: " + "#234c25" + "; color: " + "#757575" +";",
                QueueUserStatus.Skipped => "background-color: " + "#5a1218" + "; color: " + "#757575" +";",
                _ => string.Empty
            };
        }
        else
        {
            return student.Status switch
            {
                QueueUserStatus.Checking => "background-color: " + "#1c9aa5" + ";",
                QueueUserStatus.Finished => "background-color: " + "#3dbd47" + "; color: " + "#BDBDBD" + ";",
                QueueUserStatus.Skipped => "background-color: " + "#bd1333" + "; color: " + "#BDBDBD" + ";",
                _ => string.Empty
            };
        }
    }

    private string GetStatusText(QueueUserStatus status, string adminName) => status switch
    {
        QueueUserStatus.Waiting => "В очереди",
        QueueUserStatus.Skipped => "Пропущен",
        QueueUserStatus.Checking => $"Сдаёт ({adminName})",
        QueueUserStatus.Finished => "Завершил",
        _ => "Неизвестно"
    };


    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            if (_hubConnection.State == HubConnectionState.Connected)
            {
                 await _hubConnection.InvokeAsync("UnsubscribeFromQueue", EventId);
            }
            await _hubConnection.DisposeAsync();
        }
    }
}