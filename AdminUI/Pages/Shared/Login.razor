@page "/login"
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<PageTitle>Вход</PageTitle>

@if (_isCheckingAuth)
{
    <div class="d-flex justify-center align-center" style="height: 80vh;">
        <MudProgressCircular Indeterminate="true" Size="Size.Large" />
    </div>
}
else
{
    <MudGrid Justify="Justify.Center" Class="mt-12">
        <MudItem xs="12" sm="8" md="4">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" GutterBottom="true">Вход в систему</MudText>
                <MudForm @ref="_form" IsLoading="_isProcessing">
                    <MudTextField T="string" Label="Имя пользователя (Telegram)" @bind-Value="_username" Required="true"/>
                    <MudTextField T="string" Label="Пароль" @bind-Value="_password" InputType="InputType.Password" Required="true"/>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="HandleLogin" Disabled="_isProcessing">Войти</MudButton>
                </MudForm>
                <MudButton Variant="Variant.Text" OnClick='() => NavManager.NavigateTo("/register")' Class="mt-2">Нет аккаунта? Зарегистрироваться</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    private MudForm _form;
    private string _username;
    private string _password;
    private bool _isProcessing = false;
    private bool _isCheckingAuth = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            RedirectUserBasedOnRole(user);
        }
        else
        {
            _isCheckingAuth = false;
        }
    }
    
    private async Task HandleLogin()
    {
        _isProcessing = true;
        await _form.Validate();
        if (!_form.IsValid)
        {
            _isProcessing = false;
            return;
        }

        var success = await AuthService.LoginAsync(_username, _password);
        if (success)
        {
            ((JwtAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication();
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            RedirectUserBasedOnRole(authState.User);
        }
        else
        {
            Snackbar.Add("Ошибка входа. Проверьте логин или пароль.", Severity.Error);
            _isProcessing = false;
        }
    }
    private void RedirectUserBasedOnRole(System.Security.Claims.ClaimsPrincipal user)
    {
        if (user.IsInRole("Admin"))
        {
            NavManager.NavigateTo("/admin/queues", replace: true);
        }
        else if (user.IsInRole("User"))
        {
            NavManager.NavigateTo("/student/dashboard", replace: true);
        }
        else
        {
            NavManager.NavigateTo("/error", replace: true); 
        }
    }
}