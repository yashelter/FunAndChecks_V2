@page "/queue/event/{id:int}"
@model FunAndChecks.Pages.Queue.Event
@{
    ViewData["Title"] = $"–û—á–µ—Ä–µ–¥—å: {Model.QueueDetails?.EventName}";
}

@{
    Layout = "_Layout";
}

@if (Model.QueueDetails != null)
{
    <div class="container">
        <h1 class="my-4">@ViewData["Title"]</h1>
        <h5 class="text-muted">@Model.QueueDetails.SubjectName</h5>
        <hr />

        <table class="table table-hover">
            <thead>
                <tr>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–§–ò–û</th>
                    <th>–ì—Ä—É–ø–ø–∞</th>
                    <th>–ë–∞–ª–ª—ã</th>
                    <th>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç</th>
                </tr>
            </thead>
            <tbody id="queue-table-body">
                @foreach (var p in Model.QueueDetails.Participants)
                {
                    <tr id="user-row-@p.UserId">
                        <td id="user-status-@p.UserId">@GetEmojiForStatus(p.Status)</td>
                        <td>@p.FirstName @p.LastName</td>
                        <td>@p.GroupName</td>
                        <td>@p.TotalPoints</td>
                        <td id="user-admin-@p.UserId">@p.CheckingByAdminName</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @* –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã *@
    @section Scripts {
        <script src="~/js/signalr/signalr.min.js"></script>
        <script>
            // –§—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
            function getEmojiForStatus(status) {
                switch (status) {
                    case 0: return "‚è≥"; // Waiting
                    case 1: return "üëÄ"; // Checking
                    case 2: return "‚úÖ"; // Finished
                    case 3: return "‚ùå"; // Skipped
                    default: return "‚ö™Ô∏è";
                }
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SignalR Hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/queueHub") // URL, –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–∫–∞–∑–∞–ª–∏ –≤ Program.cs
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ –º–æ–¥–µ–ª–∏ Razor
            const eventId = @Model.QueueDetails.EventId;

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            connection.on("QueueUserUpdated", (update) => {
                console.log("Update received:", update);

                const userId = update.userId;
                const newStatus = update.newStatus;
                const adminName = update.adminName;

                // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ ID
                const statusCell = document.getElementById(`user-status-${userId}`);
                const adminCell = document.getElementById(`user-admin-${userId}`);

                if (statusCell) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —è—á–µ–π–∫–∏
                    statusCell.textContent = getEmojiForStatus(newStatus);
                }
                if (adminCell) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∞–¥–º–∏–Ω–∞ (–∏–ª–∏ –¥–µ–ª–∞–µ–º –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
                    adminCell.textContent = adminName || "";
                }
            });

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            async function start() {
                try {
                    await connection.start();
                    console.log("SignalR Connected.");

                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                    await connection.invoke("SubscribeToQueue", eventId);
                    console.log(`Subscribed to queue ${eventId}`);

                } catch (err) {
                    console.error(err);
                    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                    setTimeout(start, 5000);
                }
            };

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection.onclose(async () => {
                await start();
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            start();
        </script>
    }
}
else
{
    <p>–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>
}

@functions {
    // C# —Ñ—É–Ω–∫—Ü–∏—è-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    private string GetEmojiForStatus(FunAndChecks.Models.Enums.QueueUserStatus status)
    {
        return status switch
        {
            FunAndChecks.Models.Enums.QueueUserStatus.Waiting => "‚è≥",
            FunAndChecks.Models.Enums.QueueUserStatus.Checking => "üëÄ",
            FunAndChecks.Models.Enums.QueueUserStatus.Finished => "‚úÖ",
            FunAndChecks.Models.Enums.QueueUserStatus.Skipped => "‚ùå",
            _ => "‚ö™Ô∏è"
        };
    }
}