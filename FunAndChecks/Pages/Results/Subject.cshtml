@page "/results/subject/{id:int}"
@model FunAndChecks.Pages.Results.Subject

@{
    Layout = "_Layout";
    ViewData["Title"] = $"Результаты по предмету: {Model.Results?.SubjectName}";
}


@if (Model.Results != null)
{
    <h1>@ViewData["Title"]</h1>
    
    <div id="results-table-container">
        <partial name="_ResultsTable" model="Model.Results" />
    </div>

    @section Scripts {
        <script>
            const subjectId = @Model.Results.SubjectId;
            const updateInterval = 10 * 60 * 1000;

            async function refreshTable() {
                try {
                    const response = await fetch(`/results/subject/${subjectId}?handler=RefreshTable`);
                    if (response.ok) {
                        const html = await response.text();
                        document.getElementById('results-table-container').innerHTML = html;
                        console.log('Table refreshed successfully.');
                    } else {
                        console.error('Failed to refresh table.');
                    }
                } catch (error) {
                    console.error('Error during table refresh:', error);
                }
            }
            refreshTable();

            setInterval(refreshTable, updateInterval);
        </script>
    }
}